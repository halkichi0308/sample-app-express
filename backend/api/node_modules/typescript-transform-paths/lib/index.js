"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = require("path");
var typescript_1 = __importDefault(require("typescript"));
var slash_1 = __importDefault(require("slash"));
var transformer = function (_) { return function (context) { return function (sourceFile) {
    var resolver = typeof context.getEmitResolver === "function"
        ? context.getEmitResolver()
        : undefined;
    var compilerOptions = context.getCompilerOptions();
    var sourceDir = path_1.dirname(sourceFile.fileName);
    var _a = compilerOptions.baseUrl, baseUrl = _a === void 0 ? "" : _a, _b = compilerOptions.paths, paths = _b === void 0 ? {} : _b;
    var binds = Object.keys(paths)
        .filter(function (key) { return paths[key].length; })
        .map(function (key) { return ({
        regexp: new RegExp("^" + key.replace("*", "(.*)") + "$"),
        path: paths[key][0]
    }); });
    if (!baseUrl || binds.length === 0) {
        // There is nothing we can do without baseUrl and paths specified.
        return sourceFile;
    }
    function bindModuleToFile(moduleName) {
        for (var _i = 0, binds_1 = binds; _i < binds_1.length; _i++) {
            var _a = binds_1[_i], regexp = _a.regexp, path = _a.path;
            var match = regexp.exec(moduleName);
            if (match) {
                var out = path.replace(/\*/g, match[1]);
                var file = slash_1.default(path_1.relative(sourceDir, path_1.resolve(baseUrl, out)));
                return file[0] === "." ? file : "./" + file;
            }
        }
    }
    function visit(node) {
        if (resolver &&
            typescript_1.default.isExportDeclaration(node) &&
            !node.exportClause &&
            !compilerOptions.isolatedModules &&
            !resolver.moduleExportsSomeValue(node.moduleSpecifier)) {
            return undefined;
        }
        if (typescript_1.default.isImportDeclaration(node)) {
            return unpathImportDeclaration(node);
        }
        if (typescript_1.default.isExportDeclaration(node)) {
            return unpathExportDeclaration(node);
        }
        return typescript_1.default.visitEachChild(node, visit, context);
    }
    function unpathImportDeclaration(node) {
        if (!typescript_1.default.isStringLiteral(node.moduleSpecifier)) {
            return node;
        }
        var file = bindModuleToFile(node.moduleSpecifier.text);
        if (!file) {
            return node;
        }
        var fileLiteral = typescript_1.default.createLiteral(file);
        var importClause = typescript_1.default.visitNode(node.importClause, visitImportClause, typescript_1.default.isImportClause);
        return node.importClause === importClause || importClause
            ? typescript_1.default.updateImportDeclaration(node, node.decorators, node.modifiers, node.importClause, fileLiteral)
            : undefined;
    }
    function visitImportClause(node) {
        var name = resolver.isReferencedAliasDeclaration(node)
            ? node.name
            : undefined;
        var namedBindings = typescript_1.default.visitNode(node.namedBindings, visitNamedImportBindings, typescript_1.default.isNamedImports);
        return name || namedBindings
            ? typescript_1.default.updateImportClause(node, name, namedBindings)
            : undefined;
    }
    function visitNamedImportBindings(node) {
        if (node.kind === typescript_1.default.SyntaxKind.NamespaceImport) {
            return resolver.isReferencedAliasDeclaration(node) ? node : undefined;
        }
        else {
            var elements = typescript_1.default.visitNodes(node.elements, visitImportSpecifier, typescript_1.default.isImportSpecifier);
            return elements.some(function (e) { return e; })
                ? typescript_1.default.updateNamedImports(node, elements)
                : undefined;
        }
    }
    function visitImportSpecifier(node) {
        return resolver.isReferencedAliasDeclaration(node) ? node : undefined;
    }
    function unpathExportDeclaration(node) {
        if (!node.moduleSpecifier || !typescript_1.default.isStringLiteral(node.moduleSpecifier)) {
            return node;
        }
        var file = bindModuleToFile(node.moduleSpecifier.text);
        if (!file) {
            return node;
        }
        var fileLiteral = typescript_1.default.createLiteral(file);
        if ((!node.exportClause &&
            !compilerOptions.isolatedModules &&
            !resolver.moduleExportsSomeValue(node.moduleSpecifier)) ||
            (node.exportClause && resolver.isValueAliasDeclaration(node))) {
            return typescript_1.default.updateExportDeclaration(node, node.decorators, node.modifiers, node.exportClause, fileLiteral);
        }
        var exportClause = typescript_1.default.visitNode(node.exportClause, visitNamedExports, typescript_1.default.isNamedExports);
        return node.exportClause === exportClause || exportClause
            ? typescript_1.default.updateExportDeclaration(node, node.decorators, node.modifiers, node.exportClause, fileLiteral)
            : undefined;
    }
    function visitNamedExports(node) {
        var elements = typescript_1.default.visitNodes(node.elements, visitExportSpecifier, typescript_1.default.isExportSpecifier);
        return elements.some(function (e) { return e; })
            ? typescript_1.default.updateNamedExports(node, elements)
            : undefined;
    }
    function visitExportSpecifier(node) {
        return resolver.isValueAliasDeclaration(node) ? node : undefined;
    }
    return typescript_1.default.visitNode(sourceFile, visit);
}; }; };
exports.default = transformer;
